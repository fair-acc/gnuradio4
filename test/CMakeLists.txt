set(TESTS_BINARY_PATH ${CMAKE_CURRENT_BINARY_DIR})
set(TESTS_SOURCE_PATH ${CMAKE_CURRENT_SOURCE_DIR})

configure_file(build_configure.hpp.in build_configure.hpp @ONLY)

function(setup_test_no_asan TARGET_NAME)
    target_include_directories(${TARGET_NAME} PRIVATE ${CMAKE_BINARY_DIR}/include ${CMAKE_CURRENT_BINARY_DIR})
    target_link_libraries(${TARGET_NAME} PRIVATE graph-prototype-options graph-prototype fmt refl-cpp ut fftw graph-prototype-algorithm)
    add_test(NAME ${TARGET_NAME} COMMAND ${CMAKE_CROSSCOMPILING_EMULATOR} ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME})
endfunction()

function(setup_test TARGET_NAME)
    target_compile_options(${TARGET_NAME} PRIVATE "-fsanitize=address")
    target_link_options(${TARGET_NAME} PRIVATE "-fsanitize=address")
    setup_test_no_asan(${TARGET_NAME})
endfunction()

function(add_ut_test TEST_NAME)
    add_executable(${TEST_NAME} ${TEST_NAME}.cpp)
    setup_test(${TEST_NAME})
endfunction()

function(add_app_test TEST_NAME)
    add_executable(${TEST_NAME} ${TEST_NAME}.cpp)
    setup_test(${TEST_NAME})
    target_link_libraries(${TEST_NAME} PRIVATE graph-prototype-plugin)
    add_dependencies(${TEST_NAME} good_math_plugin good_base_plugin bad_plugin)
endfunction()

add_ut_test(qa_buffer)
add_ut_test(qa_data_sink)
add_ut_test(qa_dynamic_node)
add_ut_test(qa_dynamic_port)
add_ut_test(qa_fft)
add_ut_test(qa_filter)
add_ut_test(qa_hier_node)
add_ut_test(qa_node)
add_ut_test(qa_scheduler)
add_ut_test(qa_reader_writer_lock)
add_ut_test(qa_settings)
add_ut_test(qa_sources)
add_ut_test(qa_tags)
add_ut_test(qa_thread_affinity)
add_ut_test(qa_thread_pool)
add_ut_test(qa_traits)

add_subdirectory(blocklib/algorithm)

if (NOT (EMSCRIPTEN OR (CMAKE_CXX_COMPILER_ID MATCHES ".*Clang")))
    add_subdirectory(plugins)

    add_executable(qa_plugins_test qa_plugins_test.cpp)
    setup_test_no_asan(qa_plugins_test)
    target_link_libraries(qa_plugins_test PRIVATE graph-prototype-plugin)
    add_dependencies(qa_plugins_test good_math_plugin good_base_plugin bad_plugin)

    add_app_test(app_plugins_test app_plugins_test.cpp)

    add_app_test(app_grc)
    target_link_libraries(app_grc PRIVATE yaml-cpp::yaml-cpp)
endif ()
