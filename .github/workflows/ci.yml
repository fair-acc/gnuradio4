name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  build:
    name: "${{ matrix.configurations.name }} | ${{ matrix.cmake-build-type }}"
    environment: configure coverage
    runs-on: ${{ matrix.configurations.os }}
    strategy:
      fail-fast: false
      matrix:
        configurations:
          - name: Ubuntu gcc12
            os: ubuntu-22.04 # pre-release, ubuntu-latest still points to ubuntu-2004
            compiler: gcc
          - name: Ubuntu clang15
            os: ubuntu-22.04 # pre-release, ubuntu-latest still points to ubuntu-2004
            compiler: clang15
          # - name: Ubuntu Latest clang16
          #   os: ubuntu-22.04 # pre-release, ubuntu-latest still points to ubuntu-2004
          #   compiler: clang16
          - name: Ubuntu Latest emscripten
            os: ubuntu-22.04 # pre-release, ubuntu-latest still points to ubuntu-2004
            compiler: emscripten
        # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
        cmake-build-type: [ Release, Debug ]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 100

    - name: Cache
      uses: actions/cache@v2
      env:
        cache-name: cache-fetchContent-cache
      with:
        path: ${{runner.workspace}}/build/_deps
        key: ${{ runner.os }}-${{ matrix.configurations.compiler }}-${{ matrix.cmake-build-type }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Dependencies.cmake') }}

    - name: Install gcc-12
      if: matrix.configurations.compiler == 'gcc'
      run: |
        sudo apt-get install -y gcc-12 g++-12
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 110 --slave /usr/bin/g++ g++ /usr/bin/g++-12 --slave /usr/bin/gcov gcov /usr/bin/gcov-12

    - name: Install clang-14
      if: matrix.configurations.compiler == 'clang'
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-14 main'
        sudo apt update
        sudo apt install -y clang-14 libc++-14-dev libc++abi-14-dev
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-14 110

    - name: Install clang-15
      if: matrix.configurations.compiler == 'clang15'
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main'
        sudo apt update
        sudo apt install -y clang-15 libc++-15-dev libc++abi-15-dev
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-15 110

    - name: Install clang-16
      if: matrix.configurations.compiler == 'clang16'
      run: |
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
        sudo add-apt-repository 'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy main'
        sudo apt update
        sudo apt install -y clang-16 libc++-16-dev libc++abi-16-dev
        sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-16 110

    - name: Install emscripten
      if: matrix.configurations.compiler == 'emscripten'
      run: |
        cd
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        # Download and install the latest SDK tools.
        ./emsdk install latest
        # Make the "latest" SDK "active" for the current user. (writes .emscripten file)
        ./emsdk activate latest
        # Activate PATH and other environment variables in the current terminal
        source ./emsdk_env.sh

    - name: Configure CMake
      if: matrix.configurations.compiler != 'emscripten'
      shell: bash
      run: cmake -S . -B ../build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DENABLE_COVERAGE=${{ matrix.configurations.name == env.REFERENCE_CONFIG &&  matrix.cmake-build-type == 'Debug'}}

    - name: Configure CMake Emscripten
      if: matrix.configurations.compiler == 'emscripten'
      shell: bash
      run: |
        source ~/emsdk/emsdk_env.sh
        emcmake cmake -S . -B ../build -DCMAKE_BUILD_TYPE=${{ matrix.cmake-build-type }} -DENABLE_COVERAGE=OFF

    - name: Build
      if: matrix.configurations.compiler != 'emscripten'
      shell: bash
      run: cmake --build ../build --config ${{ matrix.cmake-build-type }}

    - name: Build Emscripten
      if: matrix.configurations.compiler == 'emscripten'
      shell: bash
      run: |
        source ~/emsdk/emsdk_env.sh
        cd ../build
        emmake make

    - name: execute binary
      if: matrix.configurations.compiler != 'emscripten'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ./src/main

    - name: execute binary
      if: matrix.configurations.compiler == 'emscripten'
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        source ~/emsdk/emsdk_env.sh
        ${EMSDK_NODE} ./src/main.js
